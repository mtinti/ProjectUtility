"""Flexible utilities for PCA, MDS, and biplots visualizations."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_dim_red_utility.ipynb.

# %% auto 0
__all__ = ['create_dim_reduction_dashboard', 'foo']

# %% ../nbs/01_dim_red_utility.ipynb 13
def create_dim_reduction_dashboard(in_df, 
                                 sample_palette, 
                                 feature_palette,
                                 top=50, 
                                 color_dictionary=None,
                                 n_components=5,
                                 title="Dimensionality Reduction Dashboard",
                                 figsize=(16, 12)):
    """
    Create a comprehensive 2x2 dashboard of dimensionality reduction visualizations.
    
    Parameters:
    -----------
    in_df : pandas DataFrame
        Input data with features as rows and samples as columns
    sample_palette : dict
        Mapping from sample names to colors
    feature_palette : dict
        Mapping from feature names to colors
    top : int
        Number of top features to select based on mean
    color_dictionary : dict, optional
        Mapping from color names to display names
    n_components : int
        Number of principal components to calculate
    title : str
        Title for the overall figure
    figsize : tuple
        Figure size (width, height) in inches
        
    Returns:
    --------
    tuple
        (figure, axes) - The matplotlib figure and axes objects
    """
    # Create figure and axes
    fig, axes = plt.subplots(2, 2, figsize=figsize)
    fig.suptitle(title, fontsize=16, y=0.98)
    
    # Add some space between subplots
    plt.subplots_adjust(wspace=0.3, hspace=0.3)
    
    # Create plotter instance
    plotter = DimensionalityReductionPlotter(
        in_df=in_df,
        top=top,
        color_dictionary=color_dictionary
    )
    
    # 1. PCA Plot (top left)
    plotter.fit(method='pca', n_components=n_components)
    plotter.plot_samples(
        palette=sample_palette,
        ax=axes[0, 0],
        title="PCA Sample Plot",
        point_size=70
    )
    
    # 2. MDS Plot (top right)
    plotter.fit(method='mds', n_components=2, random_state=42, dissimilarity='euclidean')
    plotter.plot_samples(
        palette=sample_palette,
        ax=axes[0, 1],
        title="MDS Sample Plot",
        point_size=70
    )
    
    # Switch back to PCA for the bottom plots
    plotter.fit(method='pca', n_components=n_components)
    
    # 3. PCA Loadings (bottom left)
    plotter.plot_loadings(
        palette=feature_palette,
        ax=axes[1, 0],
        title="PCA Feature Loadings",
        arrow=True,
        arrow_scale=3
    )
    
    # 4. Explained Variance (bottom right)
    plotter.plot_explained_variance(
        ax=axes[1, 1],
        title="Cumulative Explained Variance",
        color="#9B1D20"
    )
    
    # Add overall caption
    plt.figtext(0.5, 0.01, 
                f"Analysis of {in_df.shape[1]} samples and top {top} features",
                ha="center", fontsize=12, style='italic')
    
    return fig, axes

# %% ../nbs/01_dim_red_utility.ipynb 15
def foo(): pass
